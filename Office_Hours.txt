- Shouldn't think of it as a graph-directed or non-directed 
- We don't even really need to understand the SAT code because we will not be changing it 
- Our goal is to create a function or multiple functions that represent all of the different toggle states for the light circuit
- the a and the b represent the X1 and the X2 in the ((x1 ∨ x2) ∧ (x1 ∨ ¬x2) ∧ (¬x1 ∨ x2) ∧ (¬x1 ∨ ¬x2)
- So for this (x1 ∨ x2) ∧ (x1 ∨ ¬x2) ∧ (¬x1 ∨ x2) ∧ (¬x1 ∨ ¬x2), it is a clause that represents 4 different lights and the current toggle state of the switches 
- So we don't really care if the lights are on or off we want to know if it's possible to create a clause based on the different toggle switch combination that results in just true
Example:
Light 1       Light 2      Light 3      Light 4
(x1 ∨ x2) ∧ (x1 ∨ ¬x2) ∧ (¬x1 ∨ x2) ∧ (¬x1 ∨ ¬x2)
Light 1: x1 = switch 1 (true), switch 2 (true)
Light 2: x1 = switch 1 (false), switch 2 (true)
Light 3: x1 = switch 1 (true), switch 2 (false)
Light 4: x1 = switch 1 (true), switch 2 (true)
(x1(true) ∨ x2 (true)) ∧ (x1(false) ∨ ¬x2(false)) ∧ (¬x1(false) ∨ x2(false)) ∧ (¬x1(false) ∨ ¬x2(false))
        true         ∧        false               ∧          false           ∧         false = false
- My understanding is that each light will have 4 different states/clauses and 16 different conjunctions 
State 1: x1 = true x2 = true - (x1 ∨ x2) ∧ (x1 ∨ ¬x2) ∧ (¬x1 ∨ x2) ∧ (¬x1 ∨ ¬x2)
State 2: x1 = true x2 = false - (x1 ∨ x2) ∧ (x1 ∨ ¬x2) ∧ (¬x1 ∨ x2) ∧ (¬x1 ∨ ¬x2)
State 3: x1 = false x2 = true - (x1 ∨ x2) ∧ (x1 ∨ ¬x2) ∧ (¬x1 ∨ x2) ∧ (¬x1 ∨ ¬x2)
State 4: x1 = flase x2 = flase - (x1 ∨ x2) ∧ (x1 ∨ ¬x2) ∧ (¬x1 ∨ x2) ∧ (¬x1 ∨ ¬x2)
- If you then have the 4 lights in total each with 16 different conjunctions then we would have 16 X 16 X 16 X 16 different clauses 
and have a function that makes these different combination and then calls the SAT function we are given and if the SAT function ever returns true then we know all the lights can be turned off
- So it could be a for loops that creates the clause and calls the function and it woudl repeat 16^n where n is the number of lights and an if statment to check if the SAT function return true,
if true then exit the for loop and print yes, if it never returns true then print no

Profs Response:
-The state of the lights does matter
- And we don't want to input every option because every option isn't possible

Ex:
If a light is off we want to keep it that way so it needs to be (¬x1 ∨ ¬x2) because that means nothing is toggled so the state of the light is not changing
If a light is on we want to change that so it needs to be (x1 ∨ ¬x2) ∧ (¬x1 ∨ x2) because that means we are toggling one switch and not the other, both of these actions will result in the light being turned off

- I think it's more helpful to think of the ¬ as meaning not toggles or to do nothing 
- So something without ¬ means that an action has been taken on that switch
- (x1 ∨ ¬x2) (switch 1 was toggle and state has changed or switch 2 was left exactly how it was)

Conclusion: We will need to create functions that will create a clause that represents each light and what state it needs to be in to be turned off, 
an off light needs to stay the same and an on light needs to have an action done to it.

Ex: (Maybe the functions we would need)

Function 1: Read the inputs from the text file and create two different instances
- Call function 2 input will be (light if it's on or off, and the switches it is connected to) - this could be a list where each element has light#, 0 or 1 (for on or off), and an array of the two switches
- Not sure this is the best way to store the information
- This first function would be a good place to start (reading the information and placing it in a structure that will be easy to use and work well)

Function 2: Will assign the clauses that relate to the different lights based on whether the light is on the on or off position
- Will then add the clauses and call the corresponding function to see if there are any contradictions.

Ex:
- Each switch could be represent by a letter 1 = a, 2 = b, 3 = c.
-3,3
- 1,0,1
-1,3 (light1 connected to switches a and c)
-1,2 (light2 connected to switches a and b)
-2,3 (light3 connected to switches b and c)

- L1 = (1, 1, a, c), L2 = (2, 0, a, b), L3 = (3, 1, b, c)  (this would need to be your input for function 2)
- L1 = (a ∨ ¬c) ∧ (¬a ∨ c)
- L2 = (¬a ∨ ¬b)
- L3 = (b ∨ ¬c) ∧ (¬b ∨ c)
- These would be the different clauses and they would need to be added as clauses and then call the find contradiction function
- I'm not totally sure about all of this, this is just my understanding right now
- I think you would then have (a ∨ ¬c) ∧ (¬a ∨ c) ∧ (¬a ∨ ¬b) ∧ (b ∨ ¬c) ∧ (¬b ∨ c)
- would maybe just need for loops and if statements, for loop to loop through all the lights, and if statements to see if the light is on or off

Function2 (list of lights):
        for(lights in range(list):
                if light == 1:
                        add.clause(swtict1, ¬switch2)
                        add.clause(¬swtict1, switch2)
                else:
                        add.clause(¬swtict1, ¬swtict2)
        contridiction_function(clauses)
Switch 1 = a or b or c
Switch 2 = a or b or c
clauses = (a ∨ ¬c) ∧ (¬a ∨ c) ∧ (¬a ∨ ¬b) ∧ (b ∨ ¬c) ∧ (¬b ∨ c)














